// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a experiment by specified conditions.
	// (POST /experiment/mdd)
	CreateExperimentMDD(ctx echo.Context) error
	// Returns a list of active experiments.
	// (GET /experiment/mdd/active)
	ListExperimentsMDDActive(ctx echo.Context) error
	// Returns a list of inactive experiments.
	// (GET /experiment/mdd/inactive)
	ListExperimentsMDDInactive(ctx echo.Context) error
	// Represents a experiment by specified ID.
	// (GET /experiment/mdd/{id})
	GetExperimentMDDById(ctx echo.Context, id ExperimentId) error
	// Register the result of the specified experiment ID.
	// (POST /experiment/mdd/{id}/results)
	RegisterResultOfExperimentMDDById(ctx echo.Context, id ExperimentId) error
	// Returns "OK"
	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateExperimentMDD converts echo context to params.
func (w *ServerInterfaceWrapper) CreateExperimentMDD(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateExperimentMDD(ctx)
	return err
}

// ListExperimentsMDDActive converts echo context to params.
func (w *ServerInterfaceWrapper) ListExperimentsMDDActive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListExperimentsMDDActive(ctx)
	return err
}

// ListExperimentsMDDInactive converts echo context to params.
func (w *ServerInterfaceWrapper) ListExperimentsMDDInactive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListExperimentsMDDInactive(ctx)
	return err
}

// GetExperimentMDDById converts echo context to params.
func (w *ServerInterfaceWrapper) GetExperimentMDDById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ExperimentId

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetExperimentMDDById(ctx, id)
	return err
}

// RegisterResultOfExperimentMDDById converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterResultOfExperimentMDDById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id ExperimentId

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterResultOfExperimentMDDById(ctx, id)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/experiment/mdd", wrapper.CreateExperimentMDD)
	router.GET(baseURL+"/experiment/mdd/active", wrapper.ListExperimentsMDDActive)
	router.GET(baseURL+"/experiment/mdd/inactive", wrapper.ListExperimentsMDDInactive)
	router.GET(baseURL+"/experiment/mdd/:id", wrapper.GetExperimentMDDById)
	router.POST(baseURL+"/experiment/mdd/:id/results", wrapper.RegisterResultOfExperimentMDDById)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

